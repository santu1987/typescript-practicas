Angular de cero experto
Practicas typescript:

let name: string = 'Strider';

//caso de que una variable tenga dos tipos
let hpPoints: number | string = 95;
hpPoints = 'Full';
let isAlive: boolean = true;

console.log({
  name: name,
  hpPoints: hpPoints,
  isAlive: isAlive,
});

export {};

Objetos e interfaces

//Habilidades de personaje del señor de los anillos
//Si la variable no va a cambiar es un const
const skills: string[] = ['Bash', 'Counter'];

//Una interface permite tipar a un objeto
// El signo ?, es si el campo es undefined
interface Character {
  name: string;
  hp: number;
  skills: string[];
  hometown?: string;
}

const strider: Character = {
  name: 'Strider',
  hp: 100,
  skills: ['Bash', 'Counter'],
  hometown: 'Caracas',
};

console.table(CredentialsContainer);
export {};
Funciones:
function addNumbers(a: number, b: number) {
  return a + b;
}
//Hacemos una array function, la declaramos tipo string y aplicamos un template que concatena dos numbers
const addNumbersArrow:string = (a: number, b: number) => {
  return `${a + b}`;
};
//el Segundo parametro es opcional pore so el simbolo ?
//el tercer parámetro viene con valor predeterminado 2
function multiply(
  firstNumber: number,
  secondNumber?: number,
  base: number = 2
) {
  return firstNumber * base;
}

const result: number = addNumbers(1, 2);
const result2: string = addNumbersArrow(1, 2);
console.log({ result });

let multiplyResult: number = multiply(5);
export {};



Ejemplo de character:
//Creo la interfaz para un personaje
interface Character {
  name: string;
  hp: number;
  showHp: () => void;
}
//Funcion que aumenta la vida del personaje
const healCharacter = (character: Character, amount: number) => {
  character.hp += amount;
};
//creo al personaje con la interfaz que define arriba
const strider: Character = {
  name: 'Aragon',
  hp: 50,
  showHp() {
    console.log(`Puntos de vida ${this.hp}`);
  },
};

//Se le incrementan puntos de salud al personaje
healCharacter(strider, 10);
healCharacter(strider, 5);
//Se muestra la salud del personaje


const audioPLayer: AudioPLayer = {
  audioVolume: 90,
  songDuration: 36,
  song: 'Creep',
  details: {
    author: 'RadioHead',
    year: 1993,
  },
};

//destructuracion, sacar ciertos elementos de un objeto
//Primero el campo y luego el nuevo nombre
//const { song: anotherSong } = audioPLayer;
//console.log('Song', anotherSong);
//Ejemplo 2 destructuro un objeto y luego de ese objeto uso el campo que necesito...
const { details: thatDetails } = audioPLayer;
const { author: thatAuthor } = thatDetails;

console.log('details', thatDetails.author);
console.log('author', thatAuthor);

//otra forma de hacerlo : en una misma destructuración y el nombre de la variable puede ser el mismo del campo...
const { song: anotherSong, songDuration: duration, details } = audioPLayer;
const { author } = details;
console.log('Song', anotherSong);
console.log('Duration', duration);
console.log('Author', author);

export {};

Destructuring array:
//Destructyuring array: parecido al de objetos
const [goku, vegeta, trunks = 'Not found'] = ['gokú', 'vegeta', 'trunks'];
console.log('Personaje 3:', trunks);
export {};

Destructuring Functions

interface Product {
  description: string;
  price: number;
}

interface TaxCalculationsOptions {
  tax: number;
  products: Product[];
}

const phone: Product = {
  description: 'Nokia A1',
  price: 150.0,
};

const tablet: Product = {
  description: 'ipad Air',
  price: 250.0,
};

const shopingCart = [phone, tablet];
const tax = 0.15;

function taxtCalculation(options: TaxCalculationsOptions): number[] {
  let total = 0;

  options.products.forEach((product) => {
    total += product.price;
  });
  return [total, options.tax];
}

const result = taxtCalculation({
  products: shopingCart,
  tax: tax,
});

console.log('Total', result[0]);

Tarea: destructurando funciones del código anterior

interface Product {
  description: string;
  price: number;
}

interface TaxCalculationsOptions {
  tax: number;
  products: Product[];
}

const phone: Product = {
  description: 'Nokia A1',
  price: 150.0,
};

const tablet: Product = {
  description: 'ipad Air',
  price: 250.0,
};

const shopingCart = [phone, tablet];
const tax = 0.15;

function taxtCalculation(options: TaxCalculationsOptions): [number, number] {
  let total = 0;
  const { tax, products } = options;
  products.forEach(({ price }) => {
    total += price;
  });
  return [total, tax];
}

const [total, taxTotal] = taxtCalculation({
  products: shopingCart,
  tax: tax,
});

console.log('Total', total);
console.log('Taxt', taxTotal);

Import-export:
//Se quita del final el export{}
//Se le agrega export a las interfaces o funciones necesarias a exportar
//Los archivos que maneja importaciones no debería tener llamado de funciones a ejecutar, ya que estas serán llamadas en otros archivos.
export interface Product {
  description: string;
  price: number;
}

export function taxtCalculation(
  options: TaxCalculationsOptions
): [number, number] {
  let total = 0;
  const { tax, products } = options;
  products.forEach(({ price }) => {
    total += price;
  });
  return [total, tax];
}


Luego en el archivo donde vamos a hacer las importaciones destructuramos lo que necesitamos usar:
import { Product, taxtCalculation } from './9-destructuring-functions-tarea';

const shoppingCart: Product[] = [
  {
    description: 'Nokia',
    price: 100,
  },
  {
    description: 'ipod',
    price: 1000,
  },
];
const tax = 0.15;
const [total, taxTotal] = taxtCalculation({
  products: shoppingCart,
  tax: tax,
});

console.log('Total', total);
console.log('Tax', taxTotal);

export class Person {
  public name: string;
  private address: string;

  constructor() {
    this.name = 'Gianni Santucci';
    this.address = 'Madrid';
  }
}

//Declaramos a ironman como persona esa constante identifica como si Persona fuese una interfaz
const ironman = new Person();
console.log(ironman);


export class Person {
  public name: string;
  private address: string;

  constructor() {
    this.name = 'Gianni Santucci';
    this.address = 'Madrid';
  }
}

//Declaramos a ironman como persona esa constante identifica como si Persona fuese una interfaz
const ironman = new Person();
console.log(ironman);


Trabajando con el método constructor:

export class Person {
  /*
  public name: string;
  private address: string;
  //COmo se hace de forma redunante
  constructor(name: string, address: string) {
    this.name = name;
    this.address = address;
  }*/
  //asignando los valores en la misma declaracion De esta misma forma se realiza la inyección de dependencias en angular
  constructor(public name: string, private address: string = 'No Address') {}
}

//Declaramos a ironman como persona esa constante identifica como si Persona fuese una interfaz
const ironman = new Person('Ironman', 'new york');
console.log(ironman);

//Extendiendo una clase

export class Hero extends Person {
  constructor(
    public alterEgo: string,
    public age: number,
    public realName: string
  ) {
    //cons super se hace referencia a los atributos que se manejan en la clase a la cual se extiende nombre y direccion. SIn embargo se pueden crear nuevos campos como los señalados arriba y se crea el objeto con ellos
    super(realName, 'New York');
  }
}

const batman = new Hero('Batman', 45, 'Bruce Wayne');
console.log(batman);

Priorizando la composición:

//En vez de crear una clase heroPErson que extiende de persona creamos una clase y le pasamos un atributo mas como el objeto persona.
//Con la finalidad de facilitar el uso de las clase evitando herencia
export class HeroPerson {
  constructor(
    public alterEgo: string,
    public age: number,
    public realName: string,
    public person: Person
  ) {}
}

const clark = new Person('Clark Kent', 'Metropolis');
const superman = new HeroPerson('Superman', 35, 'CLark', clark);
console.log(superman);


Uso de genéricos
//Debo de evitar argumentos del tipo any
//Con <T> significa que es un genérico
//Un generico es una clase que puede tener diferentes tipos de datos al mismo parametro
export function whatsMyType<T>(argument: T): T {
  return argument;
}
//USo en la variable el tipo de dato en este caso como se va a manejar
let amIString = whatsMyType<string>('Hola mundo');
let amINumber = whatsMyType<number>(100);
let amIArray = whatsMyType<number[]>([1, 2, 3, 4, 5]);

console.log(amIString.split(' '));
console.log(amINumber.toFixed());
console.log(amIArray.join());
