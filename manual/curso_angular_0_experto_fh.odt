Angular de cero experto
Practicas typescript:

let name: string = 'Strider';

//caso de que una variable tenga dos tipos
let hpPoints: number | string = 95;
hpPoints = 'Full';
let isAlive: boolean = true;

console.log({
  name: name,
  hpPoints: hpPoints,
  isAlive: isAlive,
});

export {};

Objetos e interfaces

//Habilidades de personaje del señor de los anillos
//Si la variable no va a cambiar es un const
const skills: string[] = ['Bash', 'Counter'];

//Una interface permite tipar a un objeto
// El signo ?, es si el campo es undefined
interface Character {
  name: string;
  hp: number;
  skills: string[];
  hometown?: string;
}

const strider: Character = {
  name: 'Strider',
  hp: 100,
  skills: ['Bash', 'Counter'],
  hometown: 'Caracas',
};

console.table(CredentialsContainer);
export {};
Funciones:
function addNumbers(a: number, b: number) {
  return a + b;
}
//Hacemos una array function, la declaramos tipo string y aplicamos un template que concatena dos numbers
const addNumbersArrow:string = (a: number, b: number) => {
  return `${a + b}`;
};
//el Segundo parametro es opcional pore so el simbolo ?
//el tercer parámetro viene con valor predeterminado 2
function multiply(
  firstNumber: number,
  secondNumber?: number,
  base: number = 2
) {
  return firstNumber * base;
}

const result: number = addNumbers(1, 2);
const result2: string = addNumbersArrow(1, 2);
console.log({ result });

let multiplyResult: number = multiply(5);
export {};



Ejemplo de character:
//Creo la interfaz para un personaje
interface Character {
  name: string;
  hp: number;
  showHp: () => void;
}
//Funcion que aumenta la vida del personaje
const healCharacter = (character: Character, amount: number) => {
  character.hp += amount;
};
//creo al personaje con la interfaz que define arriba
const strider: Character = {
  name: 'Aragon',
  hp: 50,
  showHp() {
    console.log(`Puntos de vida ${this.hp}`);
  },
};

//Se le incrementan puntos de salud al personaje
healCharacter(strider, 10);
healCharacter(strider, 5);
//Se muestra la salud del personaje


const audioPLayer: AudioPLayer = {
  audioVolume: 90,
  songDuration: 36,
  song: 'Creep',
  details: {
    author: 'RadioHead',
    year: 1993,
  },
};

//destructuracion, sacar ciertos elementos de un objeto
//Primero el campo y luego el nuevo nombre
//const { song: anotherSong } = audioPLayer;
//console.log('Song', anotherSong);
//Ejemplo 2 destructuro un objeto y luego de ese objeto uso el campo que necesito...
const { details: thatDetails } = audioPLayer;
const { author: thatAuthor } = thatDetails;

console.log('details', thatDetails.author);
console.log('author', thatAuthor);

//otra forma de hacerlo : en una misma destructuración y el nombre de la variable puede ser el mismo del campo...
const { song: anotherSong, songDuration: duration, details } = audioPLayer;
const { author } = details;
console.log('Song', anotherSong);
console.log('Duration', duration);
console.log('Author', author);

export {};

Destructuring array:
//Destructyuring array: parecido al de objetos
const [goku, vegeta, trunks = 'Not found'] = ['gokú', 'vegeta', 'trunks'];
console.log('Personaje 3:', trunks);
export {};

